/**
 * revolution
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api-support@metaswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/DistToCharger'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DistToCharger'));
  } else {
    // Browser globals (root is window)
    if (!root.Revolution) {
      root.Revolution = {};
    }
    root.Revolution.DistApi = factory(root.Revolution.ApiClient, root.Revolution.DistToCharger);
  }
}(this, function(ApiClient, DistToCharger) {
  'use strict';

  /**
   * Dist service.
   * @module api/DistApi
   * @version 0.0.1
   */

  /**
   * Constructs a new DistApi. 
   * @alias module:api/DistApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDistToCharger operation.
     * @callback module:api/DistApi~getDistToChargerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistToCharger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the distance to charger
     * @param {String} latHere The latitude or longitude
     * @param {String} longHere The latitude or longitude
     * @param {String} latThere The latitude or longitude
     * @param {String} longThere The latitude or longitude
     * @param {module:api/DistApi~getDistToChargerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistToCharger}
     */
    this.getDistToCharger = function(latHere, longHere, latThere, longThere, callback) {
      var postBody = null;

      // verify the required parameter 'latHere' is set
      if (latHere === undefined || latHere === null) {
        throw new Error("Missing the required parameter 'latHere' when calling getDistToCharger");
      }

      // verify the required parameter 'longHere' is set
      if (longHere === undefined || longHere === null) {
        throw new Error("Missing the required parameter 'longHere' when calling getDistToCharger");
      }

      // verify the required parameter 'latThere' is set
      if (latThere === undefined || latThere === null) {
        throw new Error("Missing the required parameter 'latThere' when calling getDistToCharger");
      }

      // verify the required parameter 'longThere' is set
      if (longThere === undefined || longThere === null) {
        throw new Error("Missing the required parameter 'longThere' when calling getDistToCharger");
      }


      var pathParams = {
        'lat_here': latHere,
        'long_here': longHere,
        'lat_there': latThere,
        'long_there': longThere
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DistToCharger;

      return this.apiClient.callApi(
        '/dist_to_charger/{lat_here}/{long_here}/{lat_there}/{long_there}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
